Download the code:
  git clone https://github.com/AustinBlues/Amethyst.git

  Note: the directory name is used to namespace the database and the Redis
  data.  You may wish to change the directory name to avoid clashes with other
  applications using the database server and the Redis in-memory keyâ€“value
  database.

Change to the Amethyst directory:
  cd Amethyst

Create the database(s) and and give user necessary privilege as MariaDB or MySQL root:
  mysql -u root -p
  create database Amethyst_test;
  create database Amethyst_production;
  create database Amethyst_development;
  grant all privileges on AmethystBeta2_test.* TO 'amethyst'@'localhost' identified by 'mypwd';
  grant all privileges on AmethystBeta2_development.* TO 'amethyst'@'localhost' identified by 'mypwd';
  grant all privileges on AmethystBeta2_production.* TO 'amethyst'@'localhost' identified by 'mypwd';
  quit;

Install Ruby (2.4.0 preferred) and Redis.  They are included in most Linux
distributions.

Install the gems:
  bundle install
  gem install redis-namespace
  
Initialize the database(s):
  bundle exec padrino rake -e test sq:migrate:up
  bundle exec padrino rake -e production sq:migrate:up
  bundle exec padrino rake -e development sq:migrate:up

Create the necessary cron jobs (see REFRESH below for explanation):
  crontab -e

  Add the following lines if using installed Ruby (use output of "which ruby")
    */5 * * * * cd /home/user/Amethyst; /home/user/.rvm/wrappers/ruby-2.4.0/ruby enqueue_refresh.rb
    4 * * * * /home/user/Amethyst/cron-daily
    
  Add the following lines if using RVM Ruby 2.4.0 for user 'user' and directory "Amethyst":
    */5 * * * * cd /home/user/Amethyst;  /home/user/.rvm/wrappers/ruby-2.4.0/ruby enqueue_refresh.rb
    4 * * * * /home/user/Amethyst/cron-daily

Start the RSS feed fetch process (see REFRESH below for explanation):
  cd Amethyst
  bundle exec padrino rake -e production resque:work QUEUE=*

In another window start the server process (any port above 1024 will do):
  cd Amethyst
  bundle exec padrino start -e production --port=3002

In your browser, view "http://127.0.0.1:3002/"

Click the plus sign in the upper right to add RSS URLs.  The feed will be added, initially with the
URL as the title.  Wait a few seconds for the feed to download and click on it.  The Post titles
will be listed.  Click on a title to open it.  You will see the title in the blue box and the
description below it.  The post is now considered read and will not show again. Clicking on the
title will open the original post in a new window/tab.  Clicking on the left hooking arrow will mark
it as unread and return to the original listing of posts.  Clicking on the 'x' to the right of that
will hide the post, i.e the post is not unread and its feed will not increase its score (see SCORING
below).  Clicking on the down arrow will decrease the post's feed's score.

It generally best to not use the browser's back and forward arrows to get the most out of Amethyst.

SCORING
  Feeds are listed in order of decreasing score, i.e., highest first.  The more posts in a Feed you read, the higher the score.

REFRESH
  Feeds are refreshed every hour.  How often an RSS feed is updated can be specified in it.  Every
feed I've seen with it, has been one hour.  Accomodating anything different would be a complexity
that, IMHO, is unnecessary.  Refreshing is spread as evenly as possible across the hour, e.g. with
two feeds, they will be refreshed a half hour apart.  Five minutes has been picked as a convenient
interval to run the refresh (the first of the two cron jobs above).  Changing is is left as an
exercise for the user.

Once a day, old posts are deleted and other daily cleanup and backup is done by the second cron job
listed above.  cron_daily is a script to do this.  It accommodates computers that may not always be
on.  The cron job assumes the computer is on at least an hour a day.  Run it more frequently if
needed.  Or once a day for a computer that is always on. 
